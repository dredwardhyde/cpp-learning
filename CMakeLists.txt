cmake_minimum_required(VERSION 3.0)

PROJECT(cpp-learning)
set(CMAKE_CXX_STANDARD 11)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang")
    set(CMAKE_CXX_FLAGS "-O3 -std=c++11 -stdlib=libc++ -Wall -Wextra -pthread -mrtm")
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS "-O3 -stdlib=libc++ -march=native -Wall -Wextra -pthread")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    set(CMAKE_CXX_FLAGS /O2 /FA)
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS " -std=c++11 -pthread")
endif()

add_executable(lambda lambda.cpp)
add_executable(date_test date_test.cpp date.h date.cpp)
add_executable(accumulator accumulator.cpp)
add_executable(accumulator2 accumulator2.cpp)
add_executable(decltype decltype.cpp)
add_executable(sieve sieve.cpp)
add_executable(forward forward.cpp)
add_executable(move move.cpp)
add_executable(memory_order memory_order.cpp)
add_executable(memory_order_intel memory_order_intel.cpp)
add_executable(memory_barrier_intel memory_barrier_intel.cpp)
add_executable(intel_asm_operations intel_asm_operations.cpp)
add_executable(array array.h array.cpp)
add_executable(setjmp_longjmp setjmp_longjmp.cpp)
add_executable(thread_guard thread_guard.cpp)
add_executable(mutex mutex.cpp)
add_executable(accumulate accumulate.cpp)
add_executable(account_thread_safe account_thread_safe.cpp)
add_executable(condition_variable condition_variable.cpp)
add_executable(threadsafe_queue threadsafe_queue_test.h threadsafe_queue_test.cpp)
add_executable(future future.cpp)
add_executable(promise promise.cpp)
add_executable(shared_future shared_future.cpp)
add_executable(barrier_not_working barrier_not_working.cpp)
add_executable(fence_with_relaxed fence_with_relaxed.cpp)
add_executable(threadsafe_stack threadsafe_stack.cpp)
add_executable(threadsafe_queue_tuned threadsafe_queue_tuned.cpp threadsafe_queue_tuned.h)
add_executable(lock_free_stack lock_free_stack.cpp)
add_executable(lock_free_test lock_free_test.cpp)
add_executable(lock_free_queue lock_free_queue.cpp)
add_executable(equality_overloading equality_overloading.cpp)
add_executable(exchange_pointers exchange_pointers.cpp)
add_executable(itoa itoa.cpp)

if(NOT (MINGW))
    add_executable(memory_allocation memory_allocation.cpp)
endif()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
    include_directories("${PROJECT_SOURCE_DIR}/vld/include")
    target_link_libraries(lock_free_queue "${PROJECT_SOURCE_DIR}/vld/lib/Win64/vld.lib")
endif()

if(${_USE_TSX})
    add_executable(transactional_memory transactional_memory.cpp)
    add_executable(tsx_test tsx_test.cpp)
endif()

if (${CMAKE_CXX_COMPILER_ID} STREQUAL "AppleClang")
    add_executable(cpu_info cpu_info.cpp)
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
    target_link_libraries(lock_free_queue libatomic.a)
    target_link_libraries(lock_free_stack libatomic.a)
endif()

